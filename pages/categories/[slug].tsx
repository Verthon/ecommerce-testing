import Head from "next/head";
import { useRouter } from "next/router";
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from "next";
import { ApolloQueryResult, NetworkStatus } from "@apollo/client";

import { Footer } from "components/footer/Footer";
import { Navbar } from "components/navbar/Navbar";
import { apiClient } from "app/api/apiClient";
import { getShortLocaleVersion } from "app/localization/utils/getShortLocaleVersion";
import {
  GetAllPrimaryCategoriesSlugsDocument,
  GetAllPrimaryCategoriesSlugsQuery,
  GetProductsByCategorySlugDocument,
  GetProductsByCategorySlugQuery,
} from "generated/graphql";
import { ProductsList } from "app/products/components/products-list/products-list";
import { useLocale } from "app/localization/hooks/useLocale";

export const getStaticPaths = async (context: any) => {
  const primaryCategoriesSlugs =
    await apiClient.query<GetAllPrimaryCategoriesSlugsQuery>({
      query: GetAllPrimaryCategoriesSlugsDocument,
      variables: {
        locale: getShortLocaleVersion(context.locale),
      },
    });

  console.log("primaryCategoriesSlugs", primaryCategoriesSlugs);

  const paths = primaryCategoriesSlugs.data.categories.map((categories) => ({
    params: { slug: categories.slug },
  }));

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps<{
  products: {
    isLoading: boolean;
    list: ApolloQueryResult<GetProductsByCategorySlugQuery>["data"]["products"];
  };
}> = async (context) => {
  const allProductsList = await apiClient.query<GetProductsByCategorySlugQuery>(
    {
      query: GetProductsByCategorySlugDocument,
      variables: {
        categorySlugName: context?.params?.slug,
        locale: getShortLocaleVersion(context.locale),
      },
    },
  );

  return {
    props: {
      products: {
        isLoading: allProductsList?.networkStatus === NetworkStatus.loading,
        list: allProductsList?.data?.products || null,
      },
    },
  };
};

export type ProductsByCategory = InferGetStaticPropsType<typeof getStaticProps>;

type ProductsByCategoryProps = ProductsByCategory;

export default function ProductsByCategoryPage({
  products,
}: ProductsByCategoryProps) {
  const router = useRouter();
  const { t } = useLocale();

  return (
    <>
      <Head>
        <title>Category: {router.query.slug}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <div className="container mx-auto my-6 bg-white text-gray-900 sm:my-12">
        <h1>{t("products.pageHeading")}</h1>
        <div className="mx-12 mt-6">
          {products.list && (
            <ProductsList list={products.list} isLoading={products.isLoading} />
          )}
        </div>
      </div>
      <Footer />
    </>
  );
}
