import Head from "next/head";
import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
} from "next";
import dynamic from "next/dynamic";
import { NetworkStatus } from "@apollo/client";

import { apiClient } from "app/api/apiClient";
import { getShortLocaleVersion } from "app/localization/utils/getShortLocaleVersion";
import {
  GetAllProductSlugsDocument,
  type GetAllProductSlugsQuery,
  GetProductBySlugDocument,
  type GetProductBySlugQuery,
  type GetProductBySlugQueryVariables,
} from "generated/graphql";
import {
  type SingleProductSchema,
  singleProductSchema,
} from "app/products/models/single-product.schema";
import { isArray } from "@apollo/client/utilities";
import { notFound } from "next/navigation";
import { MainLayout } from "app/shared/components/main-layout/main-layout";
import { SingleProductDescription } from "app/products/components/single-product-description/single-product-description";
import { SingleProductPrice } from "app/products/components/single-product-price/single-product-price";
import { SingleProductImageGallery } from "app/products/components/single-product-image-gallery/single-product-image-gallery";
import { SingleProductName } from "app/products/components/single-product-name/single-product-name";

export const getStaticPaths = (async () => {
  const productSlugs = await apiClient.query<GetAllProductSlugsQuery>({
    query: GetAllProductSlugsDocument,
  });

  const paths = productSlugs.data.products.flatMap((product) => [
    { params: { slug: product.slug }, locale: "en-US" },
    { params: { slug: product.slug }, locale: "pl-PL" },
  ]);

  return {
    paths,
    fallback: false,
  };
}) satisfies GetStaticPaths;

const validateData = async ({
  product,
  networkStatus,
}: {
  product: unknown;
  networkStatus: NetworkStatus;
}) => {
  try {
    const validatedData = await singleProductSchema.safeParseAsync(product);

    if (validatedData.success) {
      return {
        props: {
          product: {
            isLoading: networkStatus === NetworkStatus.loading,
            data: validatedData.data,
          },
        },
      };
    }

    return {
      props: {
        product: {
          isLoading: false,
          data: null,
        },
      },
    };
  } catch (error) {
    console.error("Validation error: ", error);
    return {
      props: {
        product: {
          isLoading: false,
          data: null,
        },
      },
    };
  }
};

export const getStaticProps = (async (context) => {
  if (!context?.params?.slug || isArray(context.params.slug)) {
    return notFound();
  }

  try {
    const response = await apiClient.query<
      GetProductBySlugQuery,
      GetProductBySlugQueryVariables
    >({
      query: GetProductBySlugDocument,
      variables: {
        slug: context?.params?.slug,
        locale: getShortLocaleVersion(context.locale),
      },
    });

    if (!response.data.product) {
      return {
        props: {
          product: {
            isLoading: false,
            data: null,
          },
        },
      };
    }

    const data = await validateData({
      product: response.data.product,
      networkStatus: response.networkStatus,
    });

    return data;
  } catch (e) {
    console.error("error", e);

    return {
      props: {
        product: {
          isLoading: false,
          data: null,
        },
      },
    };
  }
}) satisfies GetStaticProps<{
  product: {
    isLoading: boolean;
    data: SingleProductSchema | null;
  };
}>;

export type ProductsByCategory = InferGetStaticPropsType<typeof getStaticProps>;

type ProductsByCategoryProps = ProductsByCategory;

const DynamicAddToCartButton = dynamic(
  () => import("app/cart/components/add-to-cart/add-to-cart"),
  { ssr: false },
);

export default function ProductDetails({ product }: ProductsByCategoryProps) {
  if (!product.data) return null;

  return (
    <>
      <Head>
        <title>{product.data.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>
        <div className="bg-white">
          <div className="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
            <div className="lg:grid lg:grid-cols-2 lg:items-start lg:gap-x-8">
              <SingleProductImageGallery images={product.data.images} />

              <div className="mt-10 px-4 sm:mt-16 sm:px-0 lg:mt-0">
                <SingleProductName name={product.data.name} />

                <div className="mt-3">
                  <SingleProductPrice price={undefined} />
                </div>

                <div className="mt-6">
                  <SingleProductDescription
                    description={product.data.description}
                  />
                </div>

                <div className="mt-6">
                  <DynamicAddToCartButton
                    product={{
                      id: product.data.id,
                      name: product.data.name,
                      price: 39000,
                      imageUrl: product.data.images?.[0]?.url!,
                      url: `/products/${product.data.slug}`,
                    }}
                  />
                </div>

                {/* <section aria-labelledby="details-heading" className="mt-12">
                  <h2 id="details-heading" className="sr-only">
                    Additional details
                  </h2>

                  <div className="divide-y divide-gray-200 border-t">
                    {product.details.map((detail) => (
                      <Disclosure as="div" key={detail.name}>
                        {({ open }) => (
                          <>
                            <h3>
                              <Disclosure.Button className="group relative flex w-full items-center justify-between py-6 text-left">
                                <span
                                  className={classNames(
                                    open ? "text-indigo-600" : "text-gray-900",
                                    "text-sm font-medium",
                                  )}
                                >
                                  {detail.name}
                                </span>
                                <span className="ml-6 flex items-center">
                                  {open ? (
                                    <MinusIcon
                                      className="block h-6 w-6 text-indigo-400 group-hover:text-indigo-500"
                                      aria-hidden="true"
                                    />
                                  ) : (
                                    <PlusIcon
                                      className="block h-6 w-6 text-gray-400 group-hover:text-gray-500"
                                      aria-hidden="true"
                                    />
                                  )}
                                </span>
                              </Disclosure.Button>
                            </h3>
                            <Disclosure.Panel
                              as="div"
                              className="prose prose-sm pb-6"
                            >
                              <ul role="list">
                                {detail.items.map((item) => (
                                  <li key={item}>{item}</li>
                                ))}
                              </ul>
                            </Disclosure.Panel>
                          </>
                        )}
                      </Disclosure>
                    ))}
                  </div>
                </section> */}
              </div>
            </div>
          </div>
        </div>
      </MainLayout>
    </>
  );
}
