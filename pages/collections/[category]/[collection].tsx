import Head from "next/head";
import { useRouter } from "next/router";
import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
} from "next";
import { type ApolloQueryResult, NetworkStatus } from "@apollo/client";

import { apiClient } from "app/api/apiClient";
import { getShortLocaleVersion } from "app/localization/utils/getShortLocaleVersion";
import {
  GetProductsByCategorySlugAndCollectionSlugDocument,
  type GetProductsByCategorySlugAndCollectionSlugQuery,
  type GetProductsByCategorySlugAndCollectionSlugQueryVariables,
} from "generated/graphql";
import { ProductsList } from "app/products/components/products-list/products-list";
import { useLocale } from "app/localization/hooks/useLocale";
import { MainLayout } from "app/shared/components/main-layout/main-layout";

export const getStaticPaths = (async () => {
  const categoriesSlugs = ["mens", "woman"];
  const collectionsSlugs = ["new-arrivals", "bestsellers"];

  const generatePaths = ({
    categories,
    collections,
  }: {
    categories: string[];
    collections: string[];
  }) => {
    return categories.flatMap((category) => {
      return collections.flatMap((collection) => [
        {
          params: { category, collection },
          locale: "en-US",
        },
        {
          params: { category, collection },
          locale: "pl-PL",
        },
      ]);
    });
  };

  const paths = generatePaths({
    categories: categoriesSlugs,
    collections: collectionsSlugs,
  });

  return {
    paths,
    fallback: false,
  };
}) satisfies GetStaticPaths;

export const getStaticProps: GetStaticProps<{
  products: {
    isLoading: boolean;
    list: ApolloQueryResult<GetProductsByCategorySlugAndCollectionSlugQuery>["data"]["products"];
  };
}> = async (context) => {
  console.log("collection", context?.params?.collection);
  console.log("category", context?.params?.category);

  if (
    typeof context?.params?.category !== "string" ||
    typeof context?.params?.collection !== "string" ||
    typeof context.locale !== "string"
  ) {
    return { notFound: true };
  }

  try {
    const productsList = await apiClient.query<
      GetProductsByCategorySlugAndCollectionSlugQuery,
      GetProductsByCategorySlugAndCollectionSlugQueryVariables
    >({
      query: GetProductsByCategorySlugAndCollectionSlugDocument,
      variables: {
        categorySlug: context?.params?.category,
        collectionSlug: context?.params?.collection,
        locale: getShortLocaleVersion(context.locale),
      },
    });

    if (productsList.errors) {
      // Log the errors for debugging and return a fallback or error state.
      console.error("GraphQL errors:", productsList.errors);
      return {
        props: {
          products: {
            isLoading: false,
            list: [],
          },
        },
      };
    }

    return {
      props: {
        products: {
          isLoading: productsList?.networkStatus === NetworkStatus.loading,
          list: productsList?.data?.products || [],
        },
      },
    };
  } catch (error) {
    // Handle network or other unexpected errors.
    console.error("API call failed:", error);
    return {
      props: {
        products: {
          isLoading: false,
          list: [],
        },
      },
    };
  }
};

export type ProductsByCategory = InferGetStaticPropsType<typeof getStaticProps>;

type ProductsByCategoryProps = ProductsByCategory;

export default function ProductsByCategoryAndCollectionPage({
  products,
}: ProductsByCategoryProps) {
  const router = useRouter();
  const { t } = useLocale();

  return (
    <>
      <Head>
        <title>Category: {router.query.slug}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>
        <div className="container mx-auto my-6 bg-white text-gray-900 sm:my-12">
          <h1>{t("products.pageHeading")}</h1>
          <div className="mx-12 mt-6">
            {products.list && (
              <ProductsList
                list={products.list}
                isLoading={products.isLoading}
              />
            )}
          </div>
        </div>
      </MainLayout>
    </>
  );
}
